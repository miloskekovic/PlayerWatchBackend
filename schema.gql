# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AcademicsAverageDto {
  act_score: AverageStatsDto!
  gpa: AverageStatsDto!
  sat_score: AverageStatsDto!
}

type AcademicsDto {
  act_score: [StatsFields!]!
  gpa: [StatsFields!]!
  sat_score: [StatsFields!]!
}

input AcademicsInput {
  act_score: StatsFieldsInput
  gpa: StatsFieldsInput
  sat_score: StatsFieldsInput
}

type AcademicsInputDto {
  act_score: StatsFields
  gpa: StatsFields
  sat_score: StatsFields
}

type AcceptedFanDto {
  Guardian: [UserDto!]!
  Other: [UserDto!]!
}

type Address {
  city: String
  state: String
  street: String
  zip: Float
}

input AddressInput {
  city: String
  state: String
  street: String
  zip: Float
}

type AgeGroupDto {
  _id: String!
  age_group: String!
  classification: String
  guest_teams: [GuestTeamDto!]
  has_brackets: Boolean
  has_brackets_finished: Boolean
  has_pools: Boolean
  has_pools_finished: Boolean
  hours: String!
  max_teams: Float
  minutes: String!
  pool_play_games: [PoolPlayDto!]!
  pool_play_ids: [String!]
  pools: Float
  price: String!
  registration_closed: Boolean
  snapshot_teams: [SnapshotTeamDto!]
  team_ids: [String!]
  teams: [TeamDto!]!
  type: String
}

type AllowUsers {
  userId: [String!]!
}

type AndroidSubscriptionDto {
  auto_renewing: Boolean!
  expired: Boolean!
  expires: String!
  in_grace_period: Boolean!
  on_hold: Boolean!
  paused: Boolean!
  product_id: String!
  purchased_at: String!
  revoked: Boolean!
}

type AnySubscriptionDto {
  android: [AndroidSubscriptionDto!]!
  ios: [iOSSubscriptionDto!]!
}

type AveragesDto {
  academics: AcademicsAverageDto!
  balance: BalanceAverageDto!
  baseball: BaseballAverageDto!
  cones: ConesAverageDto!
  jump: JumpAverageDto!
  speed: SpeedAverageDto!
  strength: StrengthAverageDto!
  throws: ThrowsAverageDto!
}

type AverageStatsDto {
  average: Float!
  count: Float!
  max: Float!
  min: Float!
  sum: Float!
}

type AWSTokensDTO {
  accessKey: String!
  secretKey: String!
}

type BalanceAverageDto {
  sit_and_reach: AverageStatsDto!
  stork_balance: AverageStatsDto!
  stork_hands_up_parallel: AverageStatsDto!
}

type BalanceDto {
  sit_and_reach: [StatsFields!]!
  stork_balance: [StatsFields!]!
  stork_hands_up_parallel: [StatsFields!]!
}

input BalanceInputDto {
  sit_and_reach: StatsFieldsInput
  stork_balance: StatsFieldsInput
  stork_hands_up_parallel: StatsFieldsInput
}

type BaseballAverageDto {
  exit_speed: AverageStatsDto!
  first_to_third: AverageStatsDto!
  pop_time: AverageStatsDto!
  short_to_first: AverageStatsDto!
  spin_rate: AverageStatsDto!
  third_to_first: AverageStatsDto!
  velocity: AverageStatsDto!
}

type BaseballDto {
  exit_speed: [StatsFields!]!
  first_to_third: [StatsFields!]!
  pop_time: [StatsFields!]!
  short_to_first: [StatsFields!]!
  spin_rate: [StatsFields!]!
  third_to_first: [StatsFields!]!
  velocity: [StatsFields!]!
}

type BaseballInputDto {
  exit_speed: StatsFields
  first_to_third: StatsFields
  pop_time: StatsFields
  short_to_first: StatsFields
  spin_rate: StatsFields
  third_to_first: StatsFields
  velocity: StatsFields
}

input BaseballUpdateDto {
  exit_speed: StatsFieldsInput
  first_to_third: StatsFieldsInput
  pop_time: StatsFieldsInput
  short_to_first: StatsFieldsInput
  spin_rate: StatsFieldsInput
  third_to_first: StatsFieldsInput
  velocity: StatsFieldsInput
}

type BracketGameDto {
  _id: String!
  challonge_id: Float!
  date: String
  field: String
  full_referees: [UserDto!]!
  park: String
  referees: [String!]
  time: String!
}

input BracketGameInput {
  _id: String!
  challonge_id: Float!
  date: String
  field: String
  park: String
  referees: [String!]
  time: String!
}

type BracketParticipantDto {
  _id: String
  challonge_id: Float!
  isPlayer1: Boolean!
  name: String!
  score: Float!
  thumbnail: String
}

type BracketWithChallongeGameDto {
  _id: String!
  ageGroupID: String!
  challonge_id: Float!
  date: String
  field: String
  park: String
  referees: [String!]
  scores: UpdateBracketScores
  time: String
  tournamentID: String!
}

type BugDto {
  _id: String!
  category: String
  date: String!
  description: String
  email: String
  first_name: String
  last_name: String
  message: String!
  name: String
  new_phone: String
  phone: String
  user_id: String
}

type CameraDto {
  _id: String!
  channelId: String!
  is_radar: Boolean
  name: String!
  owner: String
  quality: String
  thumbnail: String
  url: String!
}

type ChallongeGameDto {
  _id: String!
  challonge_id: Float!
  date: String
  field: String
  full_referees: [UserDto!]!
  park: String
  round: Float!
  teams: [BracketParticipantDto!]!
  time: String
  winner: Float
}

type ChallongeTournamentDto {
  currentGames: [ChallongeGameDto!]!
  pastGames: [ChallongeGameDto!]!
  totalGames: Float!
  url: String!
}

type ChatAddUsers {
  chatID: String!
  userIDs: [String!]
}

input ChatAddUsersInput {
  chatID: String!
  userIDs: [String!] = []
}

type ChatDto {
  _id: String!
  description: String
  full_users: [UserDto!]!
  messages: [MessageDto!]!
  name: String!
  owner_id: String!
  team: TeamDto
  team_id: String
  users: [ChatUser!]!
}

type ChatUser {
  admin: Boolean
  id: String!
  muted: Boolean
  muted_type: String
}

input ChatUserInput {
  admin: Boolean
  id: String!
  muted: Boolean
  muted_type: String
}

type ConesAverageDto {
  box_drill: AverageStatsDto!
  compass_agility: AverageStatsDto!
  t_test: AverageStatsDto!
  ten_yard_shuttle: AverageStatsDto!
  three_cone_drill: AverageStatsDto!
  twenty_yard_shuttle: AverageStatsDto!
}

type ConesDto {
  box_drill: [StatsFields!]!
  compass_agility: [StatsFields!]!
  t_test: [StatsFields!]!
  ten_yard_shuttle: [StatsFields!]!
  three_cone_drill: [StatsFields!]!
  twenty_yard_shuttle: [StatsFields!]!
}

input ConesInputDto {
  box_drill: StatsFieldsInput
  compass_agility: StatsFieldsInput
  t_test: StatsFieldsInput
  ten_yard_shuttle: StatsFieldsInput
  three_cone_drill: StatsFieldsInput
  twenty_yard_shuttle: StatsFieldsInput
}

type ConsumableDto {
  count: Float
  receipts: [ConsumableReceiptDto!]!
  sku: String!
}

type ConsumableReceiptDto {
  order_id: String!
  purchased_at: String!
  token: String
}

input CreateAddressInput {
  city: String
  state: String
  street: String
  zip: Float
}

input CreateAgeGroupDto {
  age_group: String!
  classification: String
  guest_teams: [GuestTeamDtoInput!] = []
  has_brackets: Boolean = false
  has_brackets_finished: Boolean = false
  has_pools: Boolean = false
  has_pools_finished: Boolean = false
  hours: String!
  max_teams: Float
  minutes: String!
  pools: Float = 0
  price: String!
  registration_closed: Boolean = false
  team_ids: [String!] = []
  type: String
}

input CreateBugInput {
  category: String
  date: String!
  email: String
  first_name: String
  last_name: String
  message: String!
  new_phone: String
  phone: String
  user_id: String
}

input CreateCameraDto {
  channelId: String!
  is_radar: Boolean = false
  name: String!
  owner: String
  quality: String
  thumbnail: String
  url: String!
}

input CreateChatInput {
  description: String
  name: String!
  owner_id: String!
  team_id: String
  users: [ChatUserInput!]
}

input CreateEntityInputInput {
  description: String
  name: String!
}

input CreateEventDto {
  date: String
  description: String
  location: String
  name: String!
  teamID: String
  time: String
  userID: String
}

input CreateParkInput {
  city: String!
  close_time: String!
  concessions: Boolean!
  description: String
  fields: [InputFieldDto!]!
  free_wifi: Boolean!
  ice_chest: Boolean!
  name: String!
  open_time: String!
  owner: String
  pictures: [String!] = []
  smoking: Boolean!
  sports: [String!] = []
  state: String!
  street: String!
  water_jug: Boolean!
  website: String
  zip: String!
}

input CreatePersonalInput {
  dob: String
  first_name: String!
  gender: String
  last_name: String!
  phone: String
}

input CreatePhotograph {
  _id: String!
  date: String!
  date_uploaded: String!
  game_id: String
  owner: PhotographOwnerInput!
  price: Float = 0
  purchased_by: [String!] = []
  school_id: String
  team_ids: [String!]!
  url: String!
}

input CreatePoolPlayInput {
  ageGroupID: String!
  date: String!
  field: String
  park: String
  pool: String!
  referees: [String!]
  teams: [GameTeamDtoInput!]
  time: String
  tournamentID: String!
}

input CreatePurchaseDto {
  isSubscription: Boolean!
  productID: String!
  purchaseToken: String!
  transactionReceipt: ReceiptInput
}

input CreateSchoolDto {
  city: String!
  fields: [CreateSchoolFieldDto!]!
  level: String!
  name: String!
  state: String!
  state_district_id: String!
  state_school_id: String!
  street: String!
  type: String!
  zip: String!
}

input CreateSchoolFieldDto {
  cameras: [CreateCameraDto!] = []
  description: String
  electricity: Boolean = false
  has_seating: Boolean = false
  has_shade: Boolean = false
  highschool_compatible: Boolean = false
  is_indoor: Boolean = false
  is_turf: Boolean = false
  name: String!
  pictures: [String!] = []
  size: String
  sports: [String!] = []
}

input CreateSchoolGame {
  away_team: SchoolGameTeamInput!
  cost: String
  date: String!
  end: String!
  end_iso: String!
  field_id: String!
  home_school_id: String!
  home_team: SchoolGameTeamInput!
  level: String!
  sport: String!
  start: String!
  start_iso: String!
}

input CreateTeamInput {
  age_group: String!
  classification: String
  description: String
  name: String!
  owner: String!
  school_id: String
  sport: String!
  thumbnail: String
}

input CreateTournamentInput {
  age_groups: [CreateAgeGroupDto!] = []
  allowed_assistants: Float
  description: String
  electronic_payments: Boolean!
  end_date: String!
  fee_description: String
  flyer: String
  hotels: String
  name: String!
  owner: String!
  parks: [String!]!
  pay_at_the_plate: Boolean!
  registration_closed: Boolean = false
  sport: String!
  start_date: String!
}

type CreateUploadedBy {
  id: String!
  name: String!
}

input CreateUploadedByInput {
  id: String!
  name: String!
}

input CreateUser {
  banner: String!
  birth_certificate: String
  city: String
  committed: String
  committed_date: String
  dob: String!
  email: String
  firebase_id: String!
  first_name: String!
  gender: String!
  grad_year: String
  last_name: String!
  phone: String!
  school: String
  school_attending: String
  school_district: String
  school_type: String
  sports: [SportInput!] = []
  state: String
  street: String
  thumbnail: String!
  tokens: [String!] = []
  zip: String
}

input CreateVideoInput {
  accepted: Boolean
  broken_tackles: String
  date: String!
  description: String
  distance: String
  exit_speed: String
  jersey_color: String
  jersey_number: String
  likes: [String!] = []
  line_drive: Boolean
  pancake: Boolean
  pop_fly: Boolean
  skill: String
  spin_rate: String
  sport: String!
  tackles: String
  tags: [String!]!
  thumbnail: String!
  title: String!
  touchdown: Boolean
  type: String!
  uploaded_by: CreateUploadedByInput!
  url: String!
  velocity: String
}

type EntityDto {
  _id: String!
  description: String
  name: String
}

type EventDto {
  _id: String!
  date: String!
  description: String
  location: String
  name: String!
  time: String
  tournamentID: String
}

type FanDto {
  accepted: Boolean!
  id: String!
  type: String
}

type FieldDto {
  description: String
  electricity: Boolean
  has_seating: Boolean
  has_shade: Boolean
  highschool_compatible: Boolean
  is_indoor: Boolean
  is_turf: Boolean
  name: String!
  pictures: [String!]
  size: String
  spikes: Boolean
  sports: [String!]
}

type FolderDto {
  _id: String!
  name: String!
  thumbnail: String
  urls: [FolderImageDto!]!
}

type FolderImageDto {
  uploaded_at: String
  uploaded_by: String!
  url: String!
}

input FolderImageInputDto {
  uploaded_at: String
  uploaded_by: String!
  url: String!
}

input FolderInputDto {
  _id: String!
  name: String!
  thumbnail: String
  urls: [FolderImageInputDto!] = []
}

type FullTeamTournamentDto {
  _id: String!
  age_groups: [AgeGroupDto!]!
  allowed_assistants: Float
  assistants: [String!]
  description: String
  end_date: String!
  fee_description: String
  flyer: String
  full_assistants: [UserDto!]
  full_owner: UserDto
  full_parks: [ParkDto!]
  hotels: String
  max_teams: Float
  name: String!
  new_team_name: String
  owner: String
  parks: [String!]!
  pay_at_the_plate: Boolean
  registration_closed: Boolean!
  sport: String!
  start_date: String!
}

type GameTeamDto {
  id: String!
  name: String!
  score: Float
  thumbnail: String
}

input GameTeamDtoInput {
  id: String!
  name: String!
  score: Float = 0
  thumbnail: String = "https://playerwatchtest.s3.amazonaws.com/PlayerWatch/PWLogoSmall.png"
}

input GenerateBracketFromPoolInput {
  ageGroupID: String!
  participants: [ParticipantsInput!]!
  tournamentID: String!
}

type GetFansDto {
  accepted: AcceptedFanDto!
  pending: [UserDto!]!
}

type GetPlayersDto {
  accepted: [UserDto!]!
  pending: [UserDto!]!
}

type GetPurchasesDto {
  subscriptions: AnySubscriptionDto!
}

type GetTeamsDto {
  accepted: [TeamDto!]!
  pending: [TeamDto!]!
}

type GetTeamUsers {
  accepted: [UserDto!]!
  pending: [UserDto!]!
}

type GetVideosDto {
  accepted: [VideoDto!]!
  pending: [VideoDto!]!
}

type GuestTeamDto {
  _id: String!
  name: String!
  paid: Boolean
  thumbnail: String
}

input GuestTeamDtoInput {
  name: String!
  thumbnail: String
}

input InputFieldDto {
  description: String
  electricity: Boolean = false
  has_seating: Boolean = false
  has_shade: Boolean = false
  highschool_compatible: Boolean = false
  is_indoor: Boolean = false
  is_turf: Boolean = false
  name: String!
  pictures: [String!] = []
  size: String
  spikes: Boolean = false
  sports: [String!] = "false"
}

input InputUpdateEntity {
  description: String
  id: String!
  name: String
}

type InviteDto {
  accepted: Boolean!
  id: String!
}

type iOSSubscriptionDto {
  _id: String!
  auto_renewing: Boolean!
  expired: Boolean!
  expires: String!
  in_grace_period: Boolean!
  in_trial_period: Boolean!
  product_id: String!
  purchased_at: String!
  revoked: Boolean!
}

type JumpAverageDto {
  broad_jump: AverageStatsDto!
  one_step_vertical_jump: AverageStatsDto!
  quadrant_jump: AverageStatsDto!
  triple_jump: AverageStatsDto!
  vertical_jump: AverageStatsDto!
}

type JumpDto {
  broad_jump: [StatsFields!]!
  one_step_vertical_jump: [StatsFields!]!
  quadrant_jump: [StatsFields!]!
  triple_jump: [StatsFields!]!
  vertical_jump: [StatsFields!]!
}

input JumpInputDto {
  broad_jump: StatsFieldsInput
  one_step_vertical_jump: StatsFieldsInput
  quadrant_jump: StatsFieldsInput
  triple_jump: StatsFieldsInput
  vertical_jump: StatsFieldsInput
}

input LivestreamScheduleParams {
  cameraId: String!
  channelId: String!
  endTime: String!
  fieldId: String!
  schoolId: String!
  startTime: String!
}

type MessageDto {
  _id: String!
  createdAt: String!
  image: String
  text: String!
  user: SenderDto!
  video: String
}

input MessageInput {
  _id: String!
  createdAt: String!
  image: String
  text: String!
  user: SenderInput!
  video: String
}

type Mutation {
  acceptFanRequest(fanID: String!, fanType: String, userID: String!): UpdatedFanTypeDto!
  acceptVideo(userID: String!, videoID: String!): UserDto!
  addAdminToTeam(teamID: String!, userID: String!): TeamDto!
  addAssistantToTournament(assistantID: String!, tournamentID: String!): TournamentDto!
  addEmployeesToSchool(employeeIDs: [String!]!, schoolID: String!): SchoolFieldDto!
  addTeamToTournament(ageGroupID: String!, teamID: String!, tournamentID: String!): TournamentDto!
  addUsersToChat(chatID: String!, userIDs: [String!] = []): ChatDto!
  addUserToChat(admin: Boolean = true, chatID: String!, userID: String!): ChatDto!
  addUserToTeam(accepted: Boolean = false, teamID: String!, userID: String!): TeamDto!
  changeAdminInChat(admin: Boolean!, chatID: String!, userID: String!): ChatDto!
  changeMutedStatusInChat(chatID: String!, muted: Boolean!, muted_type: String!, userID: String!): ChatDto!
  clearCloudWatchRules: Boolean!
  closeRegistration(tournamentID: String!): TournamentDto
  confirmPaymentIntents(paymentIntentId: String!, paymentMethod: String!): Boolean!
  confirmTeamPaid(ageGroupId: String!, isPaid: Boolean!, teamID: String!, tournamentId: String!): Boolean!
  confirmTeamsPaid(ageGroupId: String!, teams: String!, tournamentId: String!): Boolean!
  createBug(category: String, date: String!, email: String, first_name: String, last_name: String, message: String!, new_phone: String, phone: String, user_id: String): Boolean!
  createChat(chat: CreateChatInput!): ChatDto!

  """
  If a teamID or userID is passed, it will add the created event to each of those entities. Both, neither, or one can be passed
  """
  createEvent(event: CreateEventDto!): EventDto
  createGuestTeam(ageGroupID: String!, guestTeam: GuestTeamDtoInput!, tournamentID: String!): TournamentDto!
  createLogin(stripeId: String!): String!
  createNewLivestreamSchedule(updateChannelParams: LivestreamScheduleParams!): String!
  createNewStripeCustomer(stripeToken: String!, userId: String!): UserDto!
  createPark(park: CreateParkInput!): ParkDto!
  createPaymentIntents(amount: Float!): String!
  createPhotograph(photograph: CreatePhotograph!): PhotographDto!
  createPoolPlay(ageGroupID: String!, date: String!, field: String, park: String, pool: String!, referees: [String!], teams: [GameTeamDtoInput!], time: String, tournamentID: String!): PoolPlayDto!
  createSchool(school: CreateSchoolDto!): SchoolDto!
  createSchoolField(field: CreateSchoolFieldDto!, schoolID: String!): SchoolFieldDto!
  createSchoolGame(game: CreateSchoolGame!, schoolID: String!, userId: String!): SchoolGameDto!
  createStripeAccount(userId: String!): String!
  createStripeCharge(amount: Float!, receipt_email: String!, stripeCustomerId: String!): Boolean!
  createStuff: Boolean!
  createTeam(team: CreateTeamInput!): TeamDto!
  createTeamFolder(name: String!, teamID: String!, thumbnail: String): TeamDto!
  createTournament(tournament: CreateTournamentInput!, userID: String!): TournamentDto!
  createUser(user: CreateUser!): UserDto!
  createVideo(userID: String!, video: CreateVideoInput!): UserDto!
  declineFanRequest(fanID: String!, userID: String!): UpdatedFanDto!
  deleteBug(bugID: String!): Boolean!
  deleteChallongeTournament(ageGroup: String, ageGroupID: String!, classification: String, tournamentID: String!, url: String): Boolean!
  deleteChat(chatID: String!): Boolean!
  deleteEvent(eventID: String!, userID: String!): Boolean
  deleteLiveStreamSchedule(liveStreamScheduleId: String!): Boolean!
  deletePhotograph(photograph: CreatePhotograph!, userID: String!): Boolean!
  deletePoolPlay(ageGroupID: String!, poolPlayID: String!, tournamentID: String!): Boolean!
  deleteSchoolField(fieldID: String!, schoolID: String!): Boolean!
  deleteSchoolGame(gameID: String!, schoolID: String!): Boolean!
  deleteTeam(teamID: String!): Boolean!
  deleteTeamFolder(folderID: String!, teamID: String!): TeamDto!
  deleteTournament(tournamentID: String!): Boolean!
  finishBracketForTournament(ageGroupID: String!, tournamentID: String!): TournamentDto!
  finishPoolPlay(ageGroupID: String!, tournamentID: String!): Boolean!
  generateBracket(ageGroupID: String, tournamentID: String!): TournamentDto!
  generateBracketFromPool(ageGroupID: String!, participants: [ParticipantsInput!]!, tournamentID: String!): TournamentDto!
  isAccountSignup(stripeId: String!): Boolean!
  leaveChat(chatID: String!, userID: String!): ChatDto!
  leaveTeam(teamID: String!, userID: String!): UserDto!
  logout(userID: String!): Boolean!

  """
  Buys the item and validates the purchase with Apple/Google. Returns the purchase token
  """
  purchaseItem(platform: String!, receipt: ReceiptInput!, userID: String!): String!
  registerRefToTournament(refID: String!, tournamentID: String!): TournamentDto!
  removeAdminFromTeam(teamID: String!, userID: String!): TeamDto!
  removeAssistantFromTournament(assistantID: String!, tournamentID: String!): TournamentDto!
  removeFan(fanID: String!, userID: String!): UpdatedFanDto!
  removeGuestTeam(ageGroupID: String!, guestTeamID: String!, tournamentID: String!): TournamentDto!
  removeTeamFromTournament(ageGroupID: String!, teamID: String!, tournamentID: String!): TournamentDto!
  removeTeamsFromAgeGroupInTournament(ageGroupID: String!, tournamentID: String!): TournamentDto!
  removeUserFromTeam(teamID: String!, userID: String!): TeamDto!
  removeVideo(userID: String!, videoID: String!): UserDto!
  report(entity: String!, id: String!, message: String!, school_id: String): Boolean!
  saveReceipt(platform: String!, purchase: CreatePurchaseDto!, userID: String!): Boolean!
  sendFanRequest(receiverID: String!, senderID: String!): UserDto!
  sendMessage(chatID: String!, message: MessageInput!): ChatDto!
  snapshotTeamForTournament(ageGroupID: String!, teamID: String!, tournamentID: String!): Boolean!
  unfollow(fanID: String!, userID: String!): UpdatedFanDto!
  unregisterRefFromTournament(refID: String!, tournamentID: String!): TournamentDto!

  """
  Update the mongoose bracket game and the challonge bracket game. If there is a winner, pass the winning team's challonge id.
  """
  updateBracketGame(bracket: UpdateBracketGameInput!): BracketWithChallongeGameDto!
  updateBug(category: String, date: String, description: String, email: String, first_name: String, id: String!, last_name: String, message: String, name: String): Boolean!
  updateChat(chat: UpdateChatInput!): ChatDto
  updateEvent(event: UpdateEventDto!): EventDto
  updatePark(park: UpdateParkInput!): ParkDto!
  updatePhotograph(photograph: UpdatePhotograph!, userID: String!): PhotographDto!
  updatePoolPlay(_id: String!, date: String!, field: String, park: String, pool: String!, referees: [String!], teams: [GameTeamDtoInput!]!, time: String): PoolPlayDto!
  updateSchool(school: UpdateSchoolDto!): SchoolDto
  updateSchoolField(field: UpdateSchoolFieldDto!, schoolID: String!): Boolean!
  updateSchoolGame(game: UpdateSchoolGameDto!, schoolID: String!): SchoolGameDto!
  updateTeam(team: UpdateTeamInput!): TeamDto!
  updateTeamFolder(folder: FolderInputDto!, teamID: String!): TeamDto!
  updateTournament(tournament: UpdateTournamentInput!): TournamentDto!
  updateUser(user: UpdateUser!): UserDto!
  updateUserStatistics(id: String!, statistics: PatchStatisticsInput!): UserDto!
  updateVideo(video: UpdateVideoInput!): VideoDto!

  """
  Attempts to use a game ticket for a stream. Returns true if it was successful or if the user has already paid for this game, otherwise will throw an error. This will also add the userID to game's paid array if successful.
  """
  useGameTicket(gameID: String!, schoolID: String!, sku: String!, userID: String!): Boolean!
}

type ParkDto {
  _id: String!
  city: String!
  close_time: String!
  concessions: Boolean!
  description: String
  fields: [FieldDto!]!
  free_wifi: Boolean!
  full_owner: UserDto
  ice_chest: Boolean!
  name: String!
  open_time: String!
  owner: String
  pictures: [String!]
  smoking: Boolean!
  sports: [String!]
  state: String!
  street: String!
  water_jug: Boolean!
  website: String
  zip: String!
}

input ParticipantsInput {
  id: String!
  name: String!
  poolPlayIndex: Float!
}

input PatchStatisticsInput {
  academics: AcademicsInput
  balance: BalanceInputDto
  baseball: BaseballUpdateDto
  cones: ConesInputDto
  jump: JumpInputDto
  speed: SpeedInputDto
  strength: StrengthInputDto
  throws: ThrowsInputDto
}

type Personal {
  dob: String
  first_name: String!
  gender: String
  last_name: String!
  phone: String
}

input PersonalInput {
  dob: String
  first_name: String
  gender: String
  last_name: String
  phone: String
}

type PhotographDto {
  _id: String!
  date: String!
  date_uploaded: String!
  full_game: SchoolGameDto
  full_school: SchoolDto
  full_teams: [TeamDto!]!
  game_id: String
  owner: PhotographOwnerDto!
  price: Float!
  purchased_by: [String!]!
  school_id: String
  team_ids: [String!]!
  url: String!
}

type PhotographOwnerDto {
  _id: String!
  first_name: String!
  last_name: String!
  thumbnail: String!
}

input PhotographOwnerInput {
  _id: String!
  first_name: String!
  last_name: String!
  thumbnail: String!
}

type PoolPlayDto {
  _id: String!
  date: String!
  field: String
  full_referees: [UserDto!]!
  park: String
  pool: String!
  referees: [String!]
  teams: [GameTeamDto!]!
  time: String
}

type PowerScoreDto {
  date: String!
  value: Float!
}

input PowerScoreDtoInput {
  date: String!
  value: Float!
}

type Query {
  doesChatExist(users: [String!]!): ChatDto
  getAllEvents: [EventDto!]!
  getAllowedUsers: AllowUsers
  getAllSchoolGames: [SchoolGameDto!]!
  getAllUsers(after: String, limit: Float = 20): [UserDto!]!
  getAverages: AveragesDto!
  getAWSTokens: AWSTokensDTO!
  getBugByID(bugID: String!): BugDto
  getBugs: [BugDto!]!
  getChallongeTournament(ageGroupID: String!, tournamentID: String!): ChallongeTournamentDto!
  getChatByID(id: String!): ChatDto
  getChats: [ChatDto!]!
  getEventByID(id: String!): EventDto
  getGameByID(gameID: String!, schoolID: String!): SchoolGameDto
  getParkByID(parkID: String!): ParkDto
  getParks: [ParkDto!]!
  getPhotographByID(photoID: String!): PhotographDto
  getPhotographs: [PhotographDto!]!
  getPoolPlayByID(id: String!): PoolPlayDto
  getSchoolByID(id: String!): SchoolDto!
  getSchools: [SchoolDto!]!
  getSubscriptions: [GetPurchasesDto!]!
  getTeamByID(teamID: String!): TeamDto
  getTeams: [TeamDto!]!
  getTournamentByID(id: String!): TournamentDto
  getTournaments: [TournamentDto!]!
  getUserByFirebaseID(firebaseID: String!): UserDto
  getUserByID(id: String!): UserDto
  getVideoByID(vidID: String!): VideoDto
  getVideos: [VideoDto!]!
  isTeamPaid(ageGroupId: String!, teamID: String!, tournamentId: String!): Boolean!
}

type ReceiptDto {
  sku: String!
  token: String!
}

input ReceiptInput {
  sku: String!
  token: String!
}

type SchoolDto {
  _id: String!
  city: String!
  employee_ids: [String!]!
  fields: [SchoolFieldDto!]!
  full_employees: [UserDto!]!
  full_teams: [TeamDto!]!
  games: [SchoolGameDto!]!
  level: String!
  name: String!
  state: String!
  state_district_id: String!
  state_school_id: String!
  street: String!
  team_ids: [String!]!
  type: String!
  zip: String!
}

type SchoolFieldDto {
  _id: String!
  cameras: [CameraDto!]!
  description: String
  electricity: Boolean!
  has_seating: Boolean!
  has_shade: Boolean!
  highschool_compatible: Boolean!
  is_indoor: Boolean!
  is_turf: Boolean!
  name: String!
  pictures: [String!]!
  size: String!
  sports: [String!]!
}

type SchoolGameDto {
  _id: String!
  away_team: SchoolGameTeamDto!
  cost: String
  date: String!
  end: String!
  field_id: String!
  full_field: SchoolFieldDto
  full_home_school: SchoolDto
  home_school_id: String!
  home_team: SchoolGameTeamDto!
  level: String!
  paid: [String!]!
  photograph_ids: [String!]!
  sport: String!
  start: String!
}

type SchoolGameTeamDto {
  _id: String
  in_app: Boolean!
  name: String
  thumbnail: String
}

input SchoolGameTeamInput {
  _id: String
  in_app: Boolean!
  name: String!
  thumbnail: String
}

type SenderDto {
  _id: String!
  avatar: String!
  name: String!
}

input SenderInput {
  _id: String!
  avatar: String!
  name: String!
}

type SmallChatDto {
  id: String!
  muted: Boolean!
  team_id: String!
}

type SnapshotTeamDto {
  _id: String!
  age_group: String!
  classification: String!
  description: String
  folders: [SnapshotTeamFolderDto!]!
  full_owner: UserDto
  name: String!
  owner: String
  paid: Boolean
  snapshotted_at: String!
  sport: String!
  thumbnail: String
  users: [SnapshotTeamUserDto!]!
}

type SnapshotTeamFolderDto {
  _id: String!
  name: String!
  thumbnail: String
  urls: [SnapshotTeamFolderURLDto!]!
}

type SnapshotTeamFolderURLDto {
  uploaded_at: String
  uploaded_by: String!
  url: String!
}

type SnapshotTeamUserDto {
  _id: String!
  dob: String!
  first_name: String!
  last_name: String!
  thumbnail: String
}

type SpeedAverageDto {
  fifty_yard_dash: AverageStatsDto!
  forty_yard_dash: AverageStatsDto!
  ladder_drill: AverageStatsDto!
  sixty_yard_dash: AverageStatsDto!
  ten_yard_dash: AverageStatsDto!
  thirty_yard_dash: AverageStatsDto!
  twenty_yard_dash: AverageStatsDto!
}

type SpeedDto {
  fifty_yard_dash: [StatsFields!]!
  forty_yard_dash: [StatsFields!]!
  ladder_drill: [StatsFields!]!
  sixty_yard_dash: [StatsFields!]!
  ten_yard_dash: [StatsFields!]!
  thirty_yard_dash: [StatsFields!]!
  twenty_yard_dash: [StatsFields!]!
}

input SpeedInputDto {
  fifty_yard_dash: StatsFieldsInput
  forty_yard_dash: StatsFieldsInput
  ladder_drill: StatsFieldsInput
  sixty_yard_dash: StatsFieldsInput
  ten_yard_dash: StatsFieldsInput
  thirty_yard_dash: StatsFieldsInput
  twenty_yard_dash: StatsFieldsInput
}

type SportDto {
  primary: String!
  secondary: String
  sport: String!
}

input SportInput {
  primary: String!
  secondary: String
  sport: String!
}

type StatisticsDto {
  academics: AcademicsDto!
  balance: BalanceDto!
  baseball: BaseballDto!
  cones: ConesDto!
  jump: JumpDto!
  power_score: [PowerScoreDto!]!
  speed: SpeedDto!
  strength: StrengthDto!
  throws: ThrowsDto!
}

type StatsFields {
  certification: String
  date: String
  value: Float
  weight: Float
}

input StatsFieldsInput {
  certification: String
  date: String
  value: Float
  weight: Float
}

type StrengthAverageDto {
  bench_press: AverageStatsDto!
  chin_up: AverageStatsDto!
  deadlift: AverageStatsDto!
  grip: AverageStatsDto!
  plank: AverageStatsDto!
  push_up: AverageStatsDto!
  sit_up: AverageStatsDto!
  squat: AverageStatsDto!
}

type StrengthDto {
  bench_press: [StatsFields!]!
  chin_up: [StatsFields!]!
  deadlift: [StatsFields!]!
  grip: [StatsFields!]!
  plank: [StatsFields!]!
  pull_up: [StatsFields!]!
  push_up: [StatsFields!]!
  sit_up: [StatsFields!]!
  squat: [StatsFields!]!
}

input StrengthInputDto {
  bench_press: StatsFieldsInput
  chin_up: StatsFieldsInput
  deadlift: StatsFieldsInput
  grip: StatsFieldsInput
  plank: StatsFieldsInput
  pull_up: StatsFieldsInput
  push_up: StatsFieldsInput
  sit_up: StatsFieldsInput
  squat: StatsFieldsInput
}

type SubscribedChatDto {
  chat: ChatDto!
  deleted: Boolean
}

type Subscription {
  chatUpdated(chatID: String!): SubscribedChatDto
}

type TeamDto {
  _id: String!
  admins: [String!]!
  age_group: String!
  classification: String
  description: String
  events: [String!]!
  folders: [FolderDto!]!
  full_admins: [UserDto!]!
  full_events: [EventDto!]!
  full_owner: UserDto
  full_school: SchoolDto
  full_streams: [SchoolGameDto!]!
  full_tournaments: [FullTeamTournamentDto!]!
  full_users: GetTeamUsers!
  name: String!
  owner: String
  school_id: String
  sport: String!
  streams: [TeamStreamDto!]!
  thumbnail: String
  tournaments: [TeamTournamentDto!]!
  users: [InviteDto!]!
}

type TeamStreamDto {
  id: String!
  school_id: String!
}

type TeamTournamentDto {
  id: String!
  new_team_name: String
  paid: Boolean
}

type ThrowsAverageDto {
  backwards_overhead_throw: AverageStatsDto!
  behind_the_head_throw: AverageStatsDto!
  overhead_throw: AverageStatsDto!
}

type ThrowsDto {
  backwards_overhead_throw: [StatsFields!]!
  behind_the_head_throw: [StatsFields!]!
  overhead_throw: [StatsFields!]!
}

input ThrowsInputDto {
  backwards_overhead_throw: StatsFieldsInput
  behind_the_head_throw: StatsFieldsInput
  overhead_throw: StatsFieldsInput
}

type TournamentDto {
  _id: String!
  age_groups: [AgeGroupDto!]!
  allowed_assistants: Float
  assistants: [String!]
  description: String
  electronic_payments: Boolean!
  end_date: String!
  fee_description: String
  flyer: String
  full_assistants: [UserDto!]
  full_owner: UserDto
  full_parks: [ParkDto!]!
  full_referees: [UserDto!]!
  hotels: String
  name: String!
  owner: String
  parks: [String!]!
  pay_at_the_plate: Boolean!
  referees: [String!]
  registration_closed: Boolean
  sport: String!
  start_date: String!
}

input UpdateAgeGroupDto {
  _id: String
  age_group: String
  classification: String
  guest_teams: [UpdateGuestTeamInput!]
  has_brackets: Boolean
  has_brackets_finished: Boolean
  has_pools: Boolean
  has_pools_finished: Boolean
  hours: String!
  max_teams: Float
  minutes: String!
  pools: Float
  price: String!
  registration_closed: Boolean
  team_ids: [String!]
  type: String
}

input UpdateBracketGameInput {
  _id: String!
  ageGroupID: String!
  challonge_id: Float!
  date: String
  field: String
  park: String
  referees: [String!]
  scores: UpdateBracketScoresInput
  time: String
  tournamentID: String!
}

type UpdateBracketScores {
  player1_score: Float!
  player2_score: Float!
  winner_id: Float
}

input UpdateBracketScoresInput {
  player1_score: Float!
  player2_score: Float!
  winner_id: Float
}

input UpdateBugInput {
  category: String
  date: String
  description: String
  email: String
  first_name: String
  id: String!
  last_name: String
  message: String
  name: String
}

input UpdateCameraDto {
  _id: String!
  channelId: String
  is_radar: Boolean
  name: String
  owner: String
  quality: String
  thumbnail: String
  url: String
}

input UpdateChatInput {
  _id: String!
  description: String
  name: String
  users: [ChatUserInput!]
}

type UpdatedFanDto {
  fanID: String!
  userID: String!
}

type UpdatedFanTypeDto {
  fanID: String!
  fanType: String
  userID: String!
}

input UpdateEventDto {
  _id: String!
  date: String
  description: String
  location: String
  name: String
  time: String
}

input UpdateGuestTeamInput {
  _id: String!
  name: String!
  thumbnail: String
}

input UpdateParkInput {
  _id: String!
  city: String
  close_time: String
  concessions: Boolean
  description: String
  fields: [InputFieldDto!]
  free_wifi: Boolean
  ice_chest: Boolean
  name: String
  open_time: String
  owner: String
  pictures: [String!]
  smoking: Boolean
  sports: [String!]
  state: String
  street: String
  water_jug: Boolean
  website: String
  zip: String
}

input UpdatePhotograph {
  _id: String!
  date: String
  date_uploaded: String
  game_id: String
  owner: PhotographOwnerInput
  price: Float
  purchased_by: [String!]
  school_id: String
  team_ids: [String!]
  url: String
}

input UpdatePoolPlayInput {
  _id: String!
  date: String!
  field: String
  park: String
  pool: String!
  referees: [String!]
  teams: [GameTeamDtoInput!]!
  time: String
}

input UpdateSchoolDto {
  _id: String!
  city: String
  employee_ids: [String!]
  fields: [UpdateSchoolFieldDto!]
  games: [UpdateSchoolGameDto!]
  level: String
  name: String
  state: String
  state_district_id: String
  state_school_id: String
  street: String
  team_ids: [String!]
  type: String
  zip: String
}

input UpdateSchoolFieldDto {
  _id: String!
  cameras: [UpdateCameraDto!]
  description: String
  electricity: Boolean
  has_seating: Boolean
  has_shade: Boolean
  highschool_compatible: Boolean
  is_indoor: Boolean
  is_turf: Boolean
  name: String
  pictures: [String!]
  size: String
  sports: [String!]
}

input UpdateSchoolGameDto {
  _id: String!
  away_team: SchoolGameTeamInput
  cost: String
  date: String
  end: String
  end_iso: String
  field_id: String
  home_school_id: String
  level: String
  sport: String
  start: String
  start_iso: String
}

input UpdateTeamInput {
  _id: String!
  age_group: String
  classification: String
  description: String
  name: String
  school_id: String
  sport: String
  thumbnail: String
}

input UpdateTournamentInput {
  _id: String!
  age_groups: [UpdateAgeGroupDto!]
  allowed_assistants: Float
  description: String
  electronic_payments: Boolean
  end_date: String
  fee_description: String
  flyer: String
  hotels: String
  max_teams: Float
  name: String
  owner: String
  parks: [String!]
  pay_at_the_plate: Boolean
  registration_closed: Boolean
  sport: String
  start_date: String
}

input UpdateUser {
  _id: String!
  banner: String
  batting: String
  birth_certificate: String
  city: String
  committed: String
  committed_date: String
  dob: String
  email: String
  firebase_id: String
  first_name: String
  gender: String
  grad_year: String
  height: String
  last_name: String
  phone: String
  school_attending: String
  sports: [SportInput!]
  state: String
  street: String
  throwing: String
  thumbnail: String
  tokens: [String!]
  weight: String
  zip: String
}

input UpdateVideoInput {
  _id: String!
  accepted: Boolean
  broken_tackles: String
  date: String
  description: String
  distance: String
  exit_speed: String
  jersey_color: String
  jersey_number: String
  likes: [String!]
  line_drive: Boolean
  pancake: Boolean
  pop_fly: Boolean
  skill: String
  spin_rate: String
  sport: String
  tackles: String
  tags: [String!]
  thumbnail: String
  title: String
  touchdown: Boolean
  type: String
  uploaded_by: CreateUploadedByInput
  url: String
  velocity: String
}

input UploadedByInput {
  id: String!
  name: String!
}

type UserDto {
  _id: String!
  banner: String!
  batting: String
  birth_certificate: String
  chats: [SmallChatDto!]!
  city: String
  committed: String
  committed_date: String
  consumables: [ConsumableDto!]!
  dob: String!
  email: String
  events: [String!]!
  fans: [FanDto!]!
  firebase_id: String!
  first_name: String!
  following: [FanDto!]!
  full_chats: [ChatDto!]!
  full_events: [EventDto!]!
  full_fans: GetFansDto!
  full_following: GetFansDto!
  full_parks: [ParkDto!]!
  full_school: SchoolDto
  full_teams: GetTeamsDto!
  full_tournaments: [TournamentDto!]!
  full_video_likes: [UserDto!]!
  full_videos: GetVideosDto!
  gender: String!
  grad_year: String
  height: String
  last_name: String!
  parks: [String!]!
  phone: String!
  school_attending: String
  school_id: String
  sports: [SportDto!]
  state: String
  statistics: StatisticsDto!
  street: String
  stripe_id: String
  teams: [InviteDto!]!
  throwing: String
  thumbnail: String!
  tokens: [String!]!
  tournaments: [String!]!
  video_likes: [String!]!
  videos: [InviteDto!]!
  weight: String
  zip: String
}

type VideoDto {
  _id: String!
  accepted: Boolean
  broken_tackles: String
  date: String!
  description: String
  distance: String
  exit_speed: String
  full_likes: UserDto!
  jersey_color: String
  jersey_number: String
  likes: [String!]
  line_drive: Boolean
  pancake: Boolean
  pop_fly: Boolean
  skill: String
  spin_rate: String
  sport: String!
  tackles: String
  tags: [String!]!
  thumbnail: String!
  title: String!
  touchdown: Boolean
  type: String!
  uploaded_by: CreateUploadedBy!
  url: String!
  velocity: String
}
